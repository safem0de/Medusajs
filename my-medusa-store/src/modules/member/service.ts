// src/modules/member/service.ts
import { MedusaService } from "@medusajs/framework/utils"
import Member from "./models/member"

type MemberType = "bronze" | "silver" | "gold" | "platinum"

type CreateMemberDTO = {
    member_code?: string
    name: string
    email?: string | null
    phone?: string | null
    birth_date?: Date | null
    member_type?: MemberType
    points?: number
    total_spent?: number // üëà ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô number
    is_active?: boolean
}

export default class MemberModuleService extends MedusaService({
    Member,
}) {
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ member_code ‡∏à‡∏∞ generate ‡πÉ‡∏´‡πâ)
     */
    async createMember(data: CreateMemberDTO) {
        const payload = {
            ...data,
            member_code: data.member_code ?? (await this.generateMemberCode()),
            points: Number(data.points ?? 0),
            total_spent: Number(data.total_spent ?? 0), // üëà ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô number
            is_active: data.is_active ?? true,
        }

        return await this.createMembers(payload)
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ id
     */
    async getMember(memberId: string) {
        return await this.retrieveMember(memberId)
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ member_code (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö)
     */
    async getMemberByCode(code: string) {
        const members = await this.listMembers({ member_code: code })
        return members[0] ?? null
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    async addPoints(memberId: string, points: number) {
        if (points <= 0) throw new Error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")

        const member = await this.retrieveMember(memberId)
        const current = Number(member.points ?? 0)

        return await this.updateMembers({
            id: memberId,
            points: current + Number(points),
        })
    }

    /**
     * ‡πÅ‡∏•‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô) ‡∏à‡∏≤‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    async redeemPoints(memberId: string, points: number) {
        if (points <= 0) throw new Error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")

        const member = await this.retrieveMember(memberId)
        const current = Number(member.points ?? 0)
        const redeem = Number(points)

        if (current < redeem) {
            throw new Error(`‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${redeem} ‡πÅ‡∏ï‡πà‡∏°‡∏µ ${current} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`)
        }

        return await this.updateMembers({
            id: memberId,
            points: current - redeem,
        })
    }

    /**
     * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏∞‡∏™‡∏° (total_spent)
     */
    async addTotalSpent(memberId: string, amount: number) {
        if (amount <= 0) throw new Error("‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")

        const member = await this.retrieveMember(memberId)
        const current = Number(member.total_spent ?? 0)

        return await this.updateMembers({
            id: memberId,
            total_spent: current + Number(amount), // üëà ‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô number ‡πÄ‡∏™‡∏°‡∏≠
        })
    }

    /**
     * ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
     */
    async setActive(memberId: string, isActive: boolean) {
        await this.retrieveMember(memberId) // ensure exists
        return await this.updateMembers({
            id: memberId,
            is_active: !!isActive,
        })
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏ô‡∏ô‡∏¥‡πà‡∏á: MBR-YYYYMMDD-###
     */
    async generateMemberCode(): Promise<string> {
        const now = new Date()
        const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate())

        const [, todayCount] = await this.listAndCountMembers({
            created_at: { $gte: startOfToday },
        })

        const seq = String((todayCount ?? 0) + 1).padStart(3, "0")
        const yyyy = String(now.getFullYear())
        const mm = String(now.getMonth() + 1).padStart(2, "0")
        const dd = String(now.getDate()).padStart(2, "0")

        return `MBR-${yyyy}${mm}${dd}-${seq}`
    }
}
